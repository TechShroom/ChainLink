import org.apache.tools.ant.filters.ReplaceTokens

// This sets us up for building a forge project - you need all of these
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "http://techshroom.github.io/downloads/maven"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath group: 'com.techshroom', name: 'Aversion', version: '1.0.1-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'aversion-apt'
apply plugin: 'aversion-maven'
apply plugin: 'aversion-util'

util {
    javaVersion = '1.8'
}

idea.project.languageLevel = util.javaVersion

group = "com.techshroom"
archivesBaseName = "ChainLink"

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

// Mod Version + Build metadata
version = "${config.mod.version}+${config.mc.version}"

repositories {
    maven {
        name 'snapshots'
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compile "com.techshroom:TSModCore:${project.config.mc.version}.0"
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.0.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.0.2'
    compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.7'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.3'
    addAPTReqWComp group: 'com.google.guava', name: 'guava', version: '18.0'
    addAPT group: 'com.google.auto.factory', name: 'auto-factory', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.service', name: 'auto-service', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.value', name: 'auto-value', version: '1.2-SNAPSHOT'
    addAPTReq name: 'aopalliance'
    addAPTReq name: 'asm'
    addAPTReq name: 'auto-value'
    addAPTReq name: 'auto-common'
    addAPTReq name: 'cglib'
    addAPTReq name: 'commons-collections'
    addAPTReq name: 'commons-lang'
    addAPTReq name: 'dagger'
    addAPTReq name: 'javawriter'
    addAPTReq name: 'javax.inject'
    addAPTReq name: 'velocity'

    testCompile 'junit:junit:4.11'
}

minecraft {
    version = config.mc.version + "-" + config.forge.version
    if (file('../run').exists()) {
        runDir = "../run"
    } else {
        runDir = "run"
    }
}

ext.replaceTokens = [
    'VERSION': config.mod.version,
    'MC_VERSION': config.mc.version,
    'FORGE_VERSION': config.forge.version,
    'ID': config.mod.id,
    'NAME': config.mod.name
];

task updateVersion(type: Copy) {
    from(sourceSets.main.java.srcDirs)
    into 'build/sources/java'
    filter(ReplaceTokens, tokens: project.replaceTokens)
}

compileJava.dependsOn updateVersion

processResources {
    //redo task if any of these properties change
    inputs.property "version", project.version
    inputs.property "mc.version", config.mc.version

    // Replace properties in all files
    from(sourceSets.main.resources.srcDirs) {
        include '**.info'
        filter(ReplaceTokens, tokens: project.replaceTokens)
    }
    // Copy everything else
    from(sourceSets.main.resources.srcDirs) {
        include 'assets/**/*.*'
    }
}
